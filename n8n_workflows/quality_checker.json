{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "validate-data"
      },
      "name": "Data Validation Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "functionCode": "const items = $json.data;\nconst validationRules = {\n  product_name: { required: true, min_length: 3 },\n  price: { required: true, type: 'number', min_value: 0 },\n  source_url: { required: true, regex: '^https?://' }\n};\n\nconst validatedItems = [];\nconst invalidItems = [];\n\nfor (const item of items) {\n  let isValid = true;\n  const errors = [];\n\n  for (const field in validationRules) {\n    const rules = validationRules[field];\n    const value = item[field];\n\n    if (rules.required && (value === undefined || value === null || value === '')) {\n      isValid = false;\n      errors.push(`Field '${field}' is required.`);\n    }\n\n    if (rules.type && value !== undefined && value !== null) {\n      if (rules.type === 'number' && typeof value !== 'number') {\n        isValid = false;\n        errors.push(`Field '${field}' must be a number.`);\n      }\n      if (rules.type === 'string' && typeof value !== 'string') {\n        isValid = false;\n        errors.push(`Field '${field}' must be a string.`);\n      }\n    }\n\n    if (rules.min_length && typeof value === 'string' && value.length < rules.min_length) {\n      isValid = false;\n      errors.push(`Field '${field}' min length is ${rules.min_length}.`);\n    }\n\n    if (rules.min_value && typeof value === 'number' && value < rules.min_value) {\n      isValid = false;\n      errors.push(`Field '${field}' min value is ${rules.min_value}.`);\n    }\n\n    if (rules.regex && typeof value === 'string' && !new RegExp(rules.regex).test(value)) {\n      isValid = false;\n      errors.push(`Field '${field}' does not match regex.`);\n    }\n  }\n\n  if (isValid) {\n    validatedItems.push(item);\n  } else {\n    invalidItems.push({ item, errors });\n  }\n}\n\nreturn [{ json: { validated: validatedItems, invalid: invalidItems } }];"
      },
      "name": "Apply Validation Rules",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [500, 300]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.invalid.length > 0 }}"
            }
          ]
        }
      },
      "name": "Check for Invalid Data",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [750, 300]
    },
    {
      "parameters": {
        "subject": "Data Quality Alert",
        "fromEmail": "n8n@example.com",
        "toEmail": "admin@example.com",
        "text": "Invalid data detected: {{ JSON.stringify($json.invalid) }}"
      },
      "name": "Send Alert (Invalid Data)",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [1000, 450]
    },
    {
      "parameters": {
        "url": "{{ $env[\"API_BASE_URL\"] }}/api/v1/webhooks/data_injest",,
        "method": "POST",
        "jsonBody": true,
        "authentication": "none",
        "bodyParameters": {
          "parameters": [
            {
              "name": "data",
              "value": "={{ $json.validated }}"
            }
          ]
        }
      },
      "name": "Ingest Valid Data to API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1000, 150]
    }
  ],
  "connections": {
    "Data Validation Webhook": {
      "main": [
        [
          {
            "node": "Apply Validation Rules",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Apply Validation Rules": {
      "main": [
        [
          {
            "node": "Check for Invalid Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for Invalid Data": {
      "main": [
        [
          {
            "node": "Send Alert (Invalid Data)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Ingest Valid Data to API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "name": "Data Quality Checker Workflow",
  "timezone": "Europe/Berlin"
}